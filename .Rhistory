boxplot(result,range=0)
result = split(s$u[,6],geneAnnotation$CHR)
result = result[ which(names(result)!="chrUn") ]
boxplot(result,range=0)
boxplot(result,range=0,ylim=c(-0.025,0.025))
medians = sapply(result,median)
names(result)[ which.max(abs(medians)) ]
result = split(s$u[,6],geneAnnotation$CHR)
result = result[ which(names(result)!="chrUn") ]
boxplot(result,range=0)
boxplot(result,range=0,ylim=c(-0.025,0.025))
?geneAnnotation
medians = sapply(result,median)
names(result)[ which.max(abs(medians)) ]
result = split(s$u[,6],geneAnnotation$CHR)
result = result[ which(names(result)!="chrUn") ]
boxplot(result,range=0)
boxplot(result,range=0,ylim=c(-0.025,0.025))
medians = sapply(result,median)
names(result)[ which.max(abs(medians)) ]
cor(z[1,],mds[,1])
#Using the z we computed in exercise 4 of the previous exercises:
library(tissuesGeneExpression)
data(tissuesGeneExpression)
y = e - rowMeans(e)
s = svd(y)
z = s$d * t(s$v)
#we can make an mds plot:
library(rafalib)
ftissue = factor(tissue)
mypar(1,1)
plot(z[1,],z[2,],col=as.numeric(ftissue))
legend("topleft",levels(ftissue),col=seq_along(ftissue),pch=1)
#Now run the function cmdscale on the original data:
d = dist(t(e))
mds = cmdscale(d, eig=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
library(ggplot2)
library(UsingR)
library(contrast)
library(rafalib)
library(devtools)
library(sp)
knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
library(ggplot2)
library(UsingR)
library(contrast)
library(rafalib)
library(devtools)
install_github("genomicsclass/GSE5859Subset")
install_github("genomicsclass/tissuesGeneExpression")
library(tissuesGeneExpression)
library(GSE5859Subset)
data(GSE5859Subset)
source("https://bioconductor.org/biocLite.R")
install_bioc("genefilter")
install_bioc("qvalue")
install_bioc("SpikeInSubset")
library(SpikeInSubset)
data(mas133)
library(genefilter)
library(qvalue)
#Using the z we computed in exercise 4 of the previous exercises:
library(tissuesGeneExpression)
data(tissuesGeneExpression)
y = e - rowMeans(e)
s = svd(y)
z = s$d * t(s$v)
#we can make an mds plot:
library(rafalib)
ftissue = factor(tissue)
mypar(1,1)
plot(z[1,],z[2,],col=as.numeric(ftissue))
legend("topleft",levels(ftissue),col=seq_along(ftissue),pch=1)
#Now run the function cmdscale on the original data:
d = dist(t(e))
mds = cmdscale(d, eig=TRUE)
#Using the z we computed in exercise 4 of the previous exercises:
library(tissuesGeneExpression)
data(tissuesGeneExpression)
y = e - rowMeans(e)
s = svd(y)
z = s$d * t(s$v)
#we can make an mds plot:
library(rafalib)
ftissue = factor(tissue)
mypar(1,1)
plot(z[1,],z[2,],col=as.numeric(ftissue))
legend("topleft",levels(ftissue),col=seq_along(ftissue),pch=1)
#Now run the function cmdscale on the original data:
d = dist(t(e))
mds = cmdscale(d)
#Using the z we computed in exercise 4 of the previous exercises:
library(tissuesGeneExpression)
data(tissuesGeneExpression)
y = e - rowMeans(e)
s = svd(y)
z = s$d * t(s$v)
#we can make an mds plot:
library(rafalib)
ftissue = factor(tissue)
mypar(1,1)
plot(z[1,],z[2,],col=as.numeric(ftissue))
legend("topleft",levels(ftissue),col=seq_along(ftissue),pch=1)
#Now run the function cmdscale on the original data:
d = dist(t(e))
mds = cmdscale(d)
knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
library(ggplot2)
library(UsingR)
library(contrast)
library(rafalib)
library(devtools)
install_github("genomicsclass/GSE5859Subset")
install_github("genomicsclass/tissuesGeneExpression")
library(tissuesGeneExpression)
library(GSE5859Subset)
data(GSE5859Subset)
source("https://bioconductor.org/biocLite.R")
install_bioc("genefilter")
install_bioc("qvalue")
install_bioc("SpikeInSubset")
library(SpikeInSubset)
data(mas133)
library(genefilter)
library(qvalue)
knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
library(ggplot2)
library(UsingR)
library(contrast)
library(rafalib)
library(devtools)
install_github("genomicsclass/GSE5859Subset")
install_github("genomicsclass/tissuesGeneExpression")
library(tissuesGeneExpression)
library(GSE5859Subset)
data(GSE5859Subset)
source("https://bioconductor.org/biocLite.R")
install_bioc("genefilter")
install_bioc("qvalue")
install_bioc("SpikeInSubset")
library(SpikeInSubset)
data(mas133)
library(genefilter)
library(qvalue)
#Using the z we computed in exercise 4 of the previous exercises:
library(tissuesGeneExpression)
data(tissuesGeneExpression)
y = e - rowMeans(e)
s = svd(y)
z = s$d * t(s$v)
#we can make an mds plot:
library(rafalib)
ftissue = factor(tissue)
mypar(1,1)
plot(z[1,],z[2,],col=as.numeric(ftissue))
legend("topleft",levels(ftissue),col=seq_along(ftissue),pch=1)
#Now run the function cmdscale on the original data:
d = dist(t(e))
mds = cmdscale(d)
knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
library(ggplot2)
library(UsingR)
library(contrast)
library(rafalib)
library(devtools)
install_github("genomicsclass/GSE5859Subset")
install_github("genomicsclass/tissuesGeneExpression")
library(tissuesGeneExpression)
library(GSE5859Subset)
data(GSE5859Subset)
source("https://bioconductor.org/biocLite.R")
install_bioc("genefilter")
install_bioc("qvalue")
install_bioc("SpikeInSubset")
library(SpikeInSubset)
data(mas133)
library(genefilter)
library(qvalue)
#Using the z we computed in exercise 4 of the previous exercises:
library(tissuesGeneExpression)
data(tissuesGeneExpression)
y = e - rowMeans(e)
s = svd(y)
z = s$d * t(s$v)
#we can make an mds plot:
library(rafalib)
ftissue = factor(tissue)
mypar(1,1)
plot(z[1,],z[2,],col=as.numeric(ftissue))
legend("topleft",levels(ftissue),col=seq_along(ftissue),pch=1)
#Now run the function cmdscale on the original data:
d = dist(t(e))
mds = cmdscale(d)
#Using the z we computed in exercise 4 of the previous exercises:
library(tissuesGeneExpression)
data(tissuesGeneExpression)
y = e - rowMeans(e)
s = svd(y)
z = s$d * t(s$v)
#we can make an mds plot:
library(rafalib)
ftissue = factor(tissue)
mypar(1,1)
plot(z[1,],z[2,],col=as.numeric(ftissue))
legend("topleft",levels(ftissue),col=seq_along(ftissue),pch=1)
#Now run the function cmdscale on the original data:
d = dist(t(e))
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
d = dist(t(e))
d
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
d = dist(e)
d
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
e
d = dist(t(e))
d
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
?dist
d = dist(t(e))
d
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
d = dist(t(e))
d
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
d = dist(t(e))
length(d)
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
library(devtools)
install_github("genomicsclass/tissuesGeneExpression")
d = dist(t(e))
length(d)
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
library(devtools)
install_github("genomicsclass/tissuesGeneExpression", force = TRUE)
d = dist(t(e))
length(d)
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
library(devtools)
install_github("genomicsclass/tissuesGeneExpression")
library(tissuesGeneExpression)
data(tissuesGeneExpression)
d = dist(t(e))
length(d)
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
library(devtools)
#install_github("genomicsclass/tissuesGeneExpression")
library(tissuesGeneExpression)
data(tissuesGeneExpression)
d = dist(t(e))
class(d)
length(d)
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
library(devtools)
#install_github("genomicsclass/tissuesGeneExpression")
library(tissuesGeneExpression)
data(tissuesGeneExpression)
d = dist(t(e))
class(d)
d
length(d)
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
d = as.matrix( dist(e) )
d
d = dist(t(e))
class(d)
d
length(d)
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
d = as.matrix( dist(e) )
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
d = dist( t(e) )
mds = cmdscale(d)
#Now run the function cmdscale on the original data:
d <- dist(t(mat))
#Using the z we computed in exercise 4 of the previous exercises:
library(tissuesGeneExpression)
data(tissuesGeneExpression)
y = e - rowMeans(e)
s = svd(y)
z = s$d * t(s$v)
#we can make an mds plot:
library(rafalib)
ftissue = factor(tissue)
mypar2(1,1)
#Using the z we computed in exercise 4 of the previous exercises:
library(tissuesGeneExpression)
data(tissuesGeneExpression)
y = e - rowMeans(e)
s = svd(y)
z = s$d * t(s$v)
#we can make an mds plot:
library(rafalib)
ftissue = factor(tissue)
mypar(1,1)
plot(z[1,],z[2,],col=as.numeric(ftissue))
legend("topleft",levels(ftissue),col=seq_along(ftissue),pch=1)
#If you have not done so already, install the data package tissueGeneExpression:
library(devtools)
#install_github("genomicsclass/tissuesGeneExpression")
#The data represents RNA expression levels for eight tissues, each with several biological replictes. We call samples that we consider to be from the same population, such as liver tissue from different individuals, biological replicates:
library(tissuesGeneExpression)
data(tissuesGeneExpression)
head(e)
head(tissue)
d <- dist(t(e))
class(d)
sqrt( crossprod(e[,3]-e[,45]) )
d = dist( t(e) )
length(d)
#Read the help file for dist.
#?dist
#Now run the function cmdscale on the original data:
d = dist( t(e) )
mds = cmdscale(d)
d = dist( t(e) )
d
length(d)
#Read the help file for dist.
#?dist
d = dist( t(e) )
e
length(d)
#Read the help file for dist.
#?dist
d = dist( t(e) )
f = t(e)
f
length(d)
#Read the help file for dist.
#?dist
d = dist( t(e) )
f = dist(t(e))
f
length(d)
#Read the help file for dist.
#?dist
d = dist( t(e) )
f = dist2(t(e))
d = dist2( t(e) )
d = distance(t(e))
?dist2
d = dist2( t(e) )
d = dist(t(e))
length(d)
#Read the help file for dist.
#?dist
d = dist(e)
length(d)
#Read the help file for dist.
#?dist
#Now run the function cmdscale on the original data:
d = dist(t(e))
mds = cmdscale(d)
#cor(z[1,],mds[,1])
#Now run the function cmdscale on the original data:
d = dist(t(e))
#mds = cmdscale(d)
#cor(z[2,],mds[,2])
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(magrittr)
library(devtools)
set.seed(1)
m = 10000
n = 24
x = matrix(rnorm(m*n),m,n)
colnames(x)=1:n
d <- dist( t(x) )
hc<-hclust(d)
set.seed(1)
m = 10000
n = 24
x = matrix(rnorm(m*n),m,n)
colnames(x)=1:n
hc = hclust(dist(t(x)))
set.seed(1)
m = 10000
n = 24
x = matrix(rnorm(m*n),m,n)
colnames(x)=1:n
set.seed(1)
m = 10000
n = 24
x = matrix(rnorm(m*n),m,n)
colnames(x)=1:n
head(t(x))
set.seed(1)
m = 10000
n = 24
x = matrix(rnorm(m*n),m,n)
colnames(x)=1:n
head(dist(t(x)))
set.seed(1)
m = 10000
n = 24
x = matrix(rnorm(m*n),m,n)
colnames(x)=1:n
head(dist2(t(x)))
set.seed(1)
m = 10000
n = 24
x = matrix(rnorm(m*n),m,n)
colnames(x)=1:n
head(dist(t(x)))
set.seed(1)
m = 10000
n = 24
x = matrix(rnorm(m*n),m,n)
colnames(x)=1:n
knitr::opts_chunk$set(echo = TRUE)
#In this section we will use the sva function in the sva package (available from Bioconductor) and apply it to the following data:
#if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("sva", version = "3.8")
library(sva)
library(Biobase)
library(GSE5859Subset)
data(GSE5859Subset)
s <- svd(geneExpression-rowMeans(geneExpression))
cor(sampleInfo$group,s$v[,1])
#The svafit function estimates factors, but downweighs the genes that appear to correlate with the outcome of interest. It also tries to estimate the number of factors and returns the estimated factors like this:
sex = sampleInfo$group
mod = model.matrix(~sex)
svafit = sva(geneExpression,mod)
head(svafit$sv)
#The resulting estimated factors are not that different from the PCs.
for(i in 1:ncol(svafit$sv)){
print( cor(s$v[,i],svafit$sv[,i]) )
}
#Now fit a linear model to each gene that instead of month includes these factors in the model. Use the qvalue function.
svaX<-model.matrix(~sex+svafit$sv)
library(limma)
fit <- lmFit(geneExpression,svaX)
k <- 2 #second coef, for sex
ses <- fit$stdev.unscaled[,k]*fit$sigma
ttest <- fit$coef[,k]/ses
pvals <- 2*pt(-abs(ttest),fit$df)
library(qvalue)
library(genefilter)
qval = qvalue(pvals)
qvals = qval$qvalues
sum(qvals<0.1)
index = geneAnnotation$CHR[qvals<0.1]%in%c("chrX","chrY")
mean(index)
#Below is the code to perform an exploratory data analysis to check the problem. I created a volcano plot:
res = sapply(1:nrow(geneExpression),function(i){
y = geneExpression[i,]
fit = lm(y~svaX-1)
summary(fit)$coef[2,c(1,4)]
})
qvals = qvalue(res[2,])$qvalue
pcutoff = max( res[2,qvals < .1] )
library(rafalib)
mypar(1,1)
plot(res[1,],-log10(res[2,]),xlab="M",ylab="log10 p-value")
ind = which(geneAnnotation$CHR=="chrY")
points(res[1,ind],-log10(res[2,ind]),col=1,pch=16)
ind = which(geneAnnotation$CHR=="chrX")
points(res[1,ind],-log10(res[2,ind]),col=2,pch=16)
abline(h=-log10(pcutoff))
legend("bottomleft",c("chrX","chrY"),col=c(2,1),pch=16)
#We will continue to use this dataset:
library(Biobase)
library(GSE5859Subset)
data(GSE5859Subset)
library(qvalue)
library(genefilter)
sex = factor( sex)
pval = rowttests(geneExpression, sex)$p.value
qval = qvalue(pval)
qvals = qval$qvalues
index = which(qvals<0.1 & !geneAnnotation$CHR%in%c("chrX","chrY"))
month = factor( format(sampleInfo$date,"%m"))
pval = rowttests(geneExpression[index,], month)$p.value
mean(pval<0.05)
X = model.matrix(~sex+month)
pvals <- t( sapply(1:nrow(geneExpression),function(j){
y <- geneExpression[j,]
fit <- lm(y~X-1)
summary(fit)$coef[2,4] # the 2 picks out the second (sex) coef, the 4 picks out the p value
} ) )
library(qvalue)
library(genefilter)
qval = qvalue(pvals)
qvals = qval$qvalues
sum(qvals<0.1)
# In the code above the design matrix does not change within the iterations we are computing $(X'X)^{-1}$ over and over and applying it to each gene. Instead we can perform this calculation in one matrix algebra calculation by computing it once and then obtaining all the betas by multiplying $(X^\top X)^{-1}X'Y$ with the columns of $Y$ representing genes in this case. The `limma` package has an implementation of this idea (using the QR decomposition). Note how much faster this is:
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma", version = "3.8")
